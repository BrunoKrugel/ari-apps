// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.12.4
// source: lineblocs.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BridgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hangup   bool   `protobuf:"varint,1,opt,name=hangup,proto3" json:"hangup,omitempty"`
	ClientId string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *BridgeRequest) Reset() {
	*x = BridgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BridgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeRequest) ProtoMessage() {}

func (x *BridgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeRequest.ProtoReflect.Descriptor instead.
func (*BridgeRequest) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{0}
}

func (x *BridgeRequest) GetHangup() bool {
	if x != nil {
		return x.Hangup
	}
	return false
}

func (x *BridgeRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

type BridgeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BridgeId string `protobuf:"bytes,1,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
}

func (x *BridgeReply) Reset() {
	*x = BridgeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BridgeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeReply) ProtoMessage() {}

func (x *BridgeReply) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeReply.ProtoReflect.Descriptor instead.
func (*BridgeReply) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{1}
}

func (x *BridgeReply) GetBridgeId() string {
	if x != nil {
		return x.BridgeId
	}
	return ""
}

type CallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId      string `protobuf:"bytes,1,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
	CallId      string `protobuf:"bytes,2,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	CallerId    string `protobuf:"bytes,3,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	CallType    string `protobuf:"bytes,4,opt,name=call_type,json=callType,proto3" json:"call_type,omitempty"`
	Destination string `protobuf:"bytes,5,opt,name=destination,proto3" json:"destination,omitempty"`
	Timeout     string `protobuf:"bytes,6,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *CallRequest) Reset() {
	*x = CallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallRequest) ProtoMessage() {}

func (x *CallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallRequest.ProtoReflect.Descriptor instead.
func (*CallRequest) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{2}
}

func (x *CallRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *CallRequest) GetCallId() string {
	if x != nil {
		return x.CallId
	}
	return ""
}

func (x *CallRequest) GetCallerId() string {
	if x != nil {
		return x.CallerId
	}
	return ""
}

func (x *CallRequest) GetCallType() string {
	if x != nil {
		return x.CallType
	}
	return ""
}

func (x *CallRequest) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *CallRequest) GetTimeout() string {
	if x != nil {
		return x.Timeout
	}
	return ""
}

type CallReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallId    string `protobuf:"bytes,1,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	ChannelId string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *CallReply) Reset() {
	*x = CallReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallReply) ProtoMessage() {}

func (x *CallReply) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallReply.ProtoReflect.Descriptor instead.
func (*CallReply) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{3}
}

func (x *CallReply) GetCallId() string {
	if x != nil {
		return x.CallId
	}
	return ""
}

func (x *CallReply) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

type ChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *ChannelRequest) Reset() {
	*x = ChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelRequest) ProtoMessage() {}

func (x *ChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelRequest.ProtoReflect.Descriptor instead.
func (*ChannelRequest) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{4}
}

func (x *ChannelRequest) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

type ChannelReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChannelReply) Reset() {
	*x = ChannelReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelReply) ProtoMessage() {}

func (x *ChannelReply) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelReply.ProtoReflect.Descriptor instead.
func (*ChannelReply) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{5}
}

type RecordingPlayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId    int32  `protobuf:"varint,1,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
	ChannelId int32  `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	FileUri   string `protobuf:"bytes,3,opt,name=file_uri,json=fileUri,proto3" json:"file_uri,omitempty"`
}

func (x *RecordingPlayRequest) Reset() {
	*x = RecordingPlayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordingPlayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingPlayRequest) ProtoMessage() {}

func (x *RecordingPlayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingPlayRequest.ProtoReflect.Descriptor instead.
func (*RecordingPlayRequest) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{6}
}

func (x *RecordingPlayRequest) GetFlowId() int32 {
	if x != nil {
		return x.FlowId
	}
	return 0
}

func (x *RecordingPlayRequest) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *RecordingPlayRequest) GetFileUri() string {
	if x != nil {
		return x.FileUri
	}
	return ""
}

type RecordingPlayReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RecordingPlayReply) Reset() {
	*x = RecordingPlayReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordingPlayReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingPlayReply) ProtoMessage() {}

func (x *RecordingPlayReply) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingPlayReply.ProtoReflect.Descriptor instead.
func (*RecordingPlayReply) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{7}
}

type Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *Channel) Reset() {
	*x = Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Channel) ProtoMessage() {}

func (x *Channel) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Channel.ProtoReflect.Descriptor instead.
func (*Channel) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{8}
}

func (x *Channel) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

type ChannelFetchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *ChannelFetchRequest) Reset() {
	*x = ChannelFetchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelFetchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelFetchRequest) ProtoMessage() {}

func (x *ChannelFetchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelFetchRequest.ProtoReflect.Descriptor instead.
func (*ChannelFetchRequest) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{9}
}

func (x *ChannelFetchRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

type ChannelFetchReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel *Channel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *ChannelFetchReply) Reset() {
	*x = ChannelFetchReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelFetchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelFetchReply) ProtoMessage() {}

func (x *ChannelFetchReply) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelFetchReply.ProtoReflect.Descriptor instead.
func (*ChannelFetchReply) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{10}
}

func (x *ChannelFetchReply) GetChannel() *Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

type ConferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ConferenceRequest) Reset() {
	*x = ConferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConferenceRequest) ProtoMessage() {}

func (x *ConferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConferenceRequest.ProtoReflect.Descriptor instead.
func (*ConferenceRequest) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{11}
}

func (x *ConferenceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ConferenceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfId   string `protobuf:"bytes,1,opt,name=conf_id,json=confId,proto3" json:"conf_id,omitempty"`
	BridgeId string `protobuf:"bytes,2,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
}

func (x *ConferenceReply) Reset() {
	*x = ConferenceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConferenceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConferenceReply) ProtoMessage() {}

func (x *ConferenceReply) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConferenceReply.ProtoReflect.Descriptor instead.
func (*ConferenceReply) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{12}
}

func (x *ConferenceReply) GetConfId() string {
	if x != nil {
		return x.ConfId
	}
	return ""
}

func (x *ConferenceReply) GetBridgeId() string {
	if x != nil {
		return x.BridgeId
	}
	return ""
}

type ChannelGetBridgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *ChannelGetBridgeRequest) Reset() {
	*x = ChannelGetBridgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelGetBridgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelGetBridgeRequest) ProtoMessage() {}

func (x *ChannelGetBridgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelGetBridgeRequest.ProtoReflect.Descriptor instead.
func (*ChannelGetBridgeRequest) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{13}
}

func (x *ChannelGetBridgeRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

type ChannelGetBridgeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChannelGetBridgeReply) Reset() {
	*x = ChannelGetBridgeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelGetBridgeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelGetBridgeReply) ProtoMessage() {}

func (x *ChannelGetBridgeReply) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelGetBridgeReply.ProtoReflect.Descriptor instead.
func (*ChannelGetBridgeReply) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{14}
}

type ChannelRemoveBridgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	BridgeId  string `protobuf:"bytes,2,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
}

func (x *ChannelRemoveBridgeRequest) Reset() {
	*x = ChannelRemoveBridgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelRemoveBridgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelRemoveBridgeRequest) ProtoMessage() {}

func (x *ChannelRemoveBridgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelRemoveBridgeRequest.ProtoReflect.Descriptor instead.
func (*ChannelRemoveBridgeRequest) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{15}
}

func (x *ChannelRemoveBridgeRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ChannelRemoveBridgeRequest) GetBridgeId() string {
	if x != nil {
		return x.BridgeId
	}
	return ""
}

type ChannelRemoveBridgeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChannelRemoveBridgeReply) Reset() {
	*x = ChannelRemoveBridgeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelRemoveBridgeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelRemoveBridgeReply) ProtoMessage() {}

func (x *ChannelRemoveBridgeReply) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelRemoveBridgeReply.ProtoReflect.Descriptor instead.
func (*ChannelRemoveBridgeReply) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{16}
}

type ChannelTTSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text      string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Gender    string `protobuf:"bytes,2,opt,name=gender,proto3" json:"gender,omitempty"`
	Voice     string `protobuf:"bytes,3,opt,name=voice,proto3" json:"voice,omitempty"`
	Language  string `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	ChannelId string `protobuf:"bytes,5,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *ChannelTTSRequest) Reset() {
	*x = ChannelTTSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelTTSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelTTSRequest) ProtoMessage() {}

func (x *ChannelTTSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelTTSRequest.ProtoReflect.Descriptor instead.
func (*ChannelTTSRequest) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{17}
}

func (x *ChannelTTSRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ChannelTTSRequest) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *ChannelTTSRequest) GetVoice() string {
	if x != nil {
		return x.Voice
	}
	return ""
}

func (x *ChannelTTSRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *ChannelTTSRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

type ChannelTTSReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaybackId string `protobuf:"bytes,1,opt,name=playback_id,json=playbackId,proto3" json:"playback_id,omitempty"`
}

func (x *ChannelTTSReply) Reset() {
	*x = ChannelTTSReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelTTSReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelTTSReply) ProtoMessage() {}

func (x *ChannelTTSReply) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelTTSReply.ProtoReflect.Descriptor instead.
func (*ChannelTTSReply) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{18}
}

func (x *ChannelTTSReply) GetPlaybackId() string {
	if x != nil {
		return x.PlaybackId
	}
	return ""
}

type ChannelInputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *ChannelInputRequest) Reset() {
	*x = ChannelInputRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelInputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelInputRequest) ProtoMessage() {}

func (x *ChannelInputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelInputRequest.ProtoReflect.Descriptor instead.
func (*ChannelInputRequest) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{19}
}

func (x *ChannelInputRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

type ChannelInputReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChannelInputReply) Reset() {
	*x = ChannelInputReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelInputReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelInputReply) ProtoMessage() {}

func (x *ChannelInputReply) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelInputReply.ProtoReflect.Descriptor instead.
func (*ChannelInputReply) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{20}
}

type ChannelRemoveDTMFRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *ChannelRemoveDTMFRequest) Reset() {
	*x = ChannelRemoveDTMFRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelRemoveDTMFRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelRemoveDTMFRequest) ProtoMessage() {}

func (x *ChannelRemoveDTMFRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelRemoveDTMFRequest.ProtoReflect.Descriptor instead.
func (*ChannelRemoveDTMFRequest) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{21}
}

func (x *ChannelRemoveDTMFRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

type ChannelRemoveDTMFReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *ChannelRemoveDTMFReply) Reset() {
	*x = ChannelRemoveDTMFReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelRemoveDTMFReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelRemoveDTMFReply) ProtoMessage() {}

func (x *ChannelRemoveDTMFReply) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelRemoveDTMFReply.ProtoReflect.Descriptor instead.
func (*ChannelRemoveDTMFReply) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{22}
}

func (x *ChannelRemoveDTMFReply) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

type GenericChannelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *GenericChannelReq) Reset() {
	*x = GenericChannelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericChannelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericChannelReq) ProtoMessage() {}

func (x *GenericChannelReq) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericChannelReq.ProtoReflect.Descriptor instead.
func (*GenericChannelReq) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{23}
}

func (x *GenericChannelReq) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

type GenericChannelResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *GenericChannelResp) Reset() {
	*x = GenericChannelResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericChannelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericChannelResp) ProtoMessage() {}

func (x *GenericChannelResp) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericChannelResp.ProtoReflect.Descriptor instead.
func (*GenericChannelResp) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{24}
}

func (x *GenericChannelResp) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

type ChannelFlowWidgetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string            `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Widget    string            `protobuf:"bytes,2,opt,name=widget,proto3" json:"widget,omitempty"`
	EventVars map[string]string `protobuf:"bytes,3,rep,name=event_vars,json=eventVars,proto3" json:"event_vars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ChannelFlowWidgetRequest) Reset() {
	*x = ChannelFlowWidgetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelFlowWidgetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelFlowWidgetRequest) ProtoMessage() {}

func (x *ChannelFlowWidgetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelFlowWidgetRequest.ProtoReflect.Descriptor instead.
func (*ChannelFlowWidgetRequest) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{25}
}

func (x *ChannelFlowWidgetRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ChannelFlowWidgetRequest) GetWidget() string {
	if x != nil {
		return x.Widget
	}
	return ""
}

func (x *ChannelFlowWidgetRequest) GetEventVars() map[string]string {
	if x != nil {
		return x.EventVars
	}
	return nil
}

type ChannelFlowWidgetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChannelFlowWidgetReply) Reset() {
	*x = ChannelFlowWidgetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelFlowWidgetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelFlowWidgetReply) ProtoMessage() {}

func (x *ChannelFlowWidgetReply) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelFlowWidgetReply.ProtoReflect.Descriptor instead.
func (*ChannelFlowWidgetReply) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{26}
}

type ChannelStartFlowWidgetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string            `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	FlowId    string            `protobuf:"bytes,2,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
	EventVars map[string]string `protobuf:"bytes,3,rep,name=event_vars,json=eventVars,proto3" json:"event_vars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ChannelStartFlowWidgetRequest) Reset() {
	*x = ChannelStartFlowWidgetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelStartFlowWidgetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelStartFlowWidgetRequest) ProtoMessage() {}

func (x *ChannelStartFlowWidgetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelStartFlowWidgetRequest.ProtoReflect.Descriptor instead.
func (*ChannelStartFlowWidgetRequest) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{27}
}

func (x *ChannelStartFlowWidgetRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ChannelStartFlowWidgetRequest) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *ChannelStartFlowWidgetRequest) GetEventVars() map[string]string {
	if x != nil {
		return x.EventVars
	}
	return nil
}

type ChannelStartFlowWidgetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChannelStartFlowWidgetReply) Reset() {
	*x = ChannelStartFlowWidgetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelStartFlowWidgetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelStartFlowWidgetReply) ProtoMessage() {}

func (x *ChannelStartFlowWidgetReply) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelStartFlowWidgetReply.ProtoReflect.Descriptor instead.
func (*ChannelStartFlowWidgetReply) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{28}
}

type BridgeChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BridgeId  string `protobuf:"bytes,1,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
	ChannelId string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *BridgeChannelRequest) Reset() {
	*x = BridgeChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BridgeChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeChannelRequest) ProtoMessage() {}

func (x *BridgeChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeChannelRequest.ProtoReflect.Descriptor instead.
func (*BridgeChannelRequest) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{29}
}

func (x *BridgeChannelRequest) GetBridgeId() string {
	if x != nil {
		return x.BridgeId
	}
	return ""
}

func (x *BridgeChannelRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

type BridgeChannelReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BridgeChannelReply) Reset() {
	*x = BridgeChannelReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BridgeChannelReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeChannelReply) ProtoMessage() {}

func (x *BridgeChannelReply) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeChannelReply.ProtoReflect.Descriptor instead.
func (*BridgeChannelReply) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{30}
}

type BridgeChannelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BridgeId  string   `protobuf:"bytes,1,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
	ChannelId []string `protobuf:"bytes,2,rep,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *BridgeChannelsRequest) Reset() {
	*x = BridgeChannelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BridgeChannelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeChannelsRequest) ProtoMessage() {}

func (x *BridgeChannelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeChannelsRequest.ProtoReflect.Descriptor instead.
func (*BridgeChannelsRequest) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{31}
}

func (x *BridgeChannelsRequest) GetBridgeId() string {
	if x != nil {
		return x.BridgeId
	}
	return ""
}

func (x *BridgeChannelsRequest) GetChannelId() []string {
	if x != nil {
		return x.ChannelId
	}
	return nil
}

type BridgeChannelsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BridgeChannelsReply) Reset() {
	*x = BridgeChannelsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BridgeChannelsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeChannelsReply) ProtoMessage() {}

func (x *BridgeChannelsReply) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeChannelsReply.ProtoReflect.Descriptor instead.
func (*BridgeChannelsReply) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{32}
}

type BridgeTTSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text     string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Gender   string `protobuf:"bytes,2,opt,name=gender,proto3" json:"gender,omitempty"`
	Voice    string `protobuf:"bytes,3,opt,name=voice,proto3" json:"voice,omitempty"`
	Language string `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	BridgeId string `protobuf:"bytes,5,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
}

func (x *BridgeTTSRequest) Reset() {
	*x = BridgeTTSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BridgeTTSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeTTSRequest) ProtoMessage() {}

func (x *BridgeTTSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeTTSRequest.ProtoReflect.Descriptor instead.
func (*BridgeTTSRequest) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{33}
}

func (x *BridgeTTSRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *BridgeTTSRequest) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *BridgeTTSRequest) GetVoice() string {
	if x != nil {
		return x.Voice
	}
	return ""
}

func (x *BridgeTTSRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *BridgeTTSRequest) GetBridgeId() string {
	if x != nil {
		return x.BridgeId
	}
	return ""
}

type GenericBridgeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BridgeId string `protobuf:"bytes,1,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
}

func (x *GenericBridgeReq) Reset() {
	*x = GenericBridgeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericBridgeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericBridgeReq) ProtoMessage() {}

func (x *GenericBridgeReq) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericBridgeReq.ProtoReflect.Descriptor instead.
func (*GenericBridgeReq) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{34}
}

func (x *GenericBridgeReq) GetBridgeId() string {
	if x != nil {
		return x.BridgeId
	}
	return ""
}

type GenericBridgeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BridgeId string `protobuf:"bytes,1,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
}

func (x *GenericBridgeResp) Reset() {
	*x = GenericBridgeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericBridgeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericBridgeResp) ProtoMessage() {}

func (x *GenericBridgeResp) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericBridgeResp.ProtoReflect.Descriptor instead.
func (*GenericBridgeResp) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{35}
}

func (x *GenericBridgeResp) GetBridgeId() string {
	if x != nil {
		return x.BridgeId
	}
	return ""
}

type BridgeTTSReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaybackId string `protobuf:"bytes,1,opt,name=playback_id,json=playbackId,proto3" json:"playback_id,omitempty"`
}

func (x *BridgeTTSReply) Reset() {
	*x = BridgeTTSReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BridgeTTSReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeTTSReply) ProtoMessage() {}

func (x *BridgeTTSReply) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeTTSReply.ProtoReflect.Descriptor instead.
func (*BridgeTTSReply) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{36}
}

func (x *BridgeTTSReply) GetPlaybackId() string {
	if x != nil {
		return x.PlaybackId
	}
	return ""
}

type BridgeAutomateLegRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BridgeId  string `protobuf:"bytes,1,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
	ChannelId string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *BridgeAutomateLegRequest) Reset() {
	*x = BridgeAutomateLegRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BridgeAutomateLegRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeAutomateLegRequest) ProtoMessage() {}

func (x *BridgeAutomateLegRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeAutomateLegRequest.ProtoReflect.Descriptor instead.
func (*BridgeAutomateLegRequest) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{37}
}

func (x *BridgeAutomateLegRequest) GetBridgeId() string {
	if x != nil {
		return x.BridgeId
	}
	return ""
}

func (x *BridgeAutomateLegRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

type BridgeAutomateLegReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BridgeAutomateLegReply) Reset() {
	*x = BridgeAutomateLegReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BridgeAutomateLegReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeAutomateLegReply) ProtoMessage() {}

func (x *BridgeAutomateLegReply) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeAutomateLegReply.ProtoReflect.Descriptor instead.
func (*BridgeAutomateLegReply) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{38}
}

type BridgeEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BridgeId   string `protobuf:"bytes,1,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
	InlineCode string `protobuf:"bytes,2,opt,name=inline_code,json=inlineCode,proto3" json:"inline_code,omitempty"`
}

func (x *BridgeEventRequest) Reset() {
	*x = BridgeEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BridgeEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeEventRequest) ProtoMessage() {}

func (x *BridgeEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeEventRequest.ProtoReflect.Descriptor instead.
func (*BridgeEventRequest) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{39}
}

func (x *BridgeEventRequest) GetBridgeId() string {
	if x != nil {
		return x.BridgeId
	}
	return ""
}

func (x *BridgeEventRequest) GetInlineCode() string {
	if x != nil {
		return x.InlineCode
	}
	return ""
}

type BridgeEventReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BridgeEventReply) Reset() {
	*x = BridgeEventReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BridgeEventReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeEventReply) ProtoMessage() {}

func (x *BridgeEventReply) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeEventReply.ProtoReflect.Descriptor instead.
func (*BridgeEventReply) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{40}
}

type RecordingDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordingId int32 `protobuf:"varint,1,opt,name=recording_id,json=recordingId,proto3" json:"recording_id,omitempty"`
}

func (x *RecordingDeleteRequest) Reset() {
	*x = RecordingDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordingDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingDeleteRequest) ProtoMessage() {}

func (x *RecordingDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingDeleteRequest.ProtoReflect.Descriptor instead.
func (*RecordingDeleteRequest) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{41}
}

func (x *RecordingDeleteRequest) GetRecordingId() int32 {
	if x != nil {
		return x.RecordingId
	}
	return 0
}

type RecordingDeleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RecordingDeleteReply) Reset() {
	*x = RecordingDeleteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordingDeleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingDeleteReply) ProtoMessage() {}

func (x *RecordingDeleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingDeleteReply.ProtoReflect.Descriptor instead.
func (*RecordingDeleteReply) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{42}
}

type RecordingTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordingId int32  `protobuf:"varint,1,opt,name=recording_id,json=recordingId,proto3" json:"recording_id,omitempty"`
	Key         string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value       string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RecordingTagRequest) Reset() {
	*x = RecordingTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordingTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingTagRequest) ProtoMessage() {}

func (x *RecordingTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingTagRequest.ProtoReflect.Descriptor instead.
func (*RecordingTagRequest) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{43}
}

func (x *RecordingTagRequest) GetRecordingId() int32 {
	if x != nil {
		return x.RecordingId
	}
	return 0
}

func (x *RecordingTagRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RecordingTagRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type RecordingTagReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RecordingTagReply) Reset() {
	*x = RecordingTagReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordingTagReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingTagReply) ProtoMessage() {}

func (x *RecordingTagReply) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingTagReply.ProtoReflect.Descriptor instead.
func (*RecordingTagReply) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{44}
}

type RecordingTagDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordingId int32  `protobuf:"varint,1,opt,name=recording_id,json=recordingId,proto3" json:"recording_id,omitempty"`
	Key         string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *RecordingTagDeleteRequest) Reset() {
	*x = RecordingTagDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordingTagDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingTagDeleteRequest) ProtoMessage() {}

func (x *RecordingTagDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingTagDeleteRequest.ProtoReflect.Descriptor instead.
func (*RecordingTagDeleteRequest) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{45}
}

func (x *RecordingTagDeleteRequest) GetRecordingId() int32 {
	if x != nil {
		return x.RecordingId
	}
	return 0
}

func (x *RecordingTagDeleteRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type RecordingTagDeleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RecordingTagDeleteReply) Reset() {
	*x = RecordingTagDeleteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordingTagDeleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingTagDeleteReply) ProtoMessage() {}

func (x *RecordingTagDeleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingTagDeleteReply.ProtoReflect.Descriptor instead.
func (*RecordingTagDeleteReply) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{46}
}

type Recording struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordingId int32  `protobuf:"varint,1,opt,name=recording_id,json=recordingId,proto3" json:"recording_id,omitempty"`
	FileUri     string `protobuf:"bytes,2,opt,name=file_uri,json=fileUri,proto3" json:"file_uri,omitempty"`
}

func (x *Recording) Reset() {
	*x = Recording{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Recording) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recording) ProtoMessage() {}

func (x *Recording) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recording.ProtoReflect.Descriptor instead.
func (*Recording) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{47}
}

func (x *Recording) GetRecordingId() int32 {
	if x != nil {
		return x.RecordingId
	}
	return 0
}

func (x *Recording) GetFileUri() string {
	if x != nil {
		return x.FileUri
	}
	return ""
}

type SessionRecordingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SessionRecordingsRequest) Reset() {
	*x = SessionRecordingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionRecordingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionRecordingsRequest) ProtoMessage() {}

func (x *SessionRecordingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionRecordingsRequest.ProtoReflect.Descriptor instead.
func (*SessionRecordingsRequest) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{48}
}

type SessionRecordingsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Recordings []*Recording `protobuf:"bytes,1,rep,name=recordings,proto3" json:"recordings,omitempty"`
}

func (x *SessionRecordingsReply) Reset() {
	*x = SessionRecordingsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionRecordingsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionRecordingsReply) ProtoMessage() {}

func (x *SessionRecordingsReply) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionRecordingsReply.ProtoReflect.Descriptor instead.
func (*SessionRecordingsReply) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{49}
}

func (x *SessionRecordingsReply) GetRecordings() []*Recording {
	if x != nil {
		return x.Recordings
	}
	return nil
}

type Participant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Role      string `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
	Moh       string `protobuf:"bytes,3,opt,name=moh,proto3" json:"moh,omitempty"`
}

func (x *Participant) Reset() {
	*x = Participant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Participant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Participant) ProtoMessage() {}

func (x *Participant) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Participant.ProtoReflect.Descriptor instead.
func (*Participant) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{50}
}

func (x *Participant) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *Participant) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *Participant) GetMoh() string {
	if x != nil {
		return x.Moh
	}
	return ""
}

type ConferenceParticipantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfId       string         `protobuf:"bytes,1,opt,name=conf_id,json=confId,proto3" json:"conf_id,omitempty"`
	Participants []*Participant `protobuf:"bytes,2,rep,name=participants,proto3" json:"participants,omitempty"`
}

func (x *ConferenceParticipantRequest) Reset() {
	*x = ConferenceParticipantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConferenceParticipantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConferenceParticipantRequest) ProtoMessage() {}

func (x *ConferenceParticipantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConferenceParticipantRequest.ProtoReflect.Descriptor instead.
func (*ConferenceParticipantRequest) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{51}
}

func (x *ConferenceParticipantRequest) GetConfId() string {
	if x != nil {
		return x.ConfId
	}
	return ""
}

func (x *ConferenceParticipantRequest) GetParticipants() []*Participant {
	if x != nil {
		return x.Participants
	}
	return nil
}

type ConferenceParticipantReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConferenceParticipantReply) Reset() {
	*x = ConferenceParticipantReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConferenceParticipantReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConferenceParticipantReply) ProtoMessage() {}

func (x *ConferenceParticipantReply) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConferenceParticipantReply.ProtoReflect.Descriptor instead.
func (*ConferenceParticipantReply) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{52}
}

type ConferenceModeratorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfId string `protobuf:"bytes,1,opt,name=conf_id,json=confId,proto3" json:"conf_id,omitempty"`
	Value  bool   `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ConferenceModeratorRequest) Reset() {
	*x = ConferenceModeratorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConferenceModeratorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConferenceModeratorRequest) ProtoMessage() {}

func (x *ConferenceModeratorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConferenceModeratorRequest.ProtoReflect.Descriptor instead.
func (*ConferenceModeratorRequest) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{53}
}

func (x *ConferenceModeratorRequest) GetConfId() string {
	if x != nil {
		return x.ConfId
	}
	return ""
}

func (x *ConferenceModeratorRequest) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type ConferenceModeratorReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConferenceModeratorReply) Reset() {
	*x = ConferenceModeratorReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConferenceModeratorReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConferenceModeratorReply) ProtoMessage() {}

func (x *ConferenceModeratorReply) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConferenceModeratorReply.ProtoReflect.Descriptor instead.
func (*ConferenceModeratorReply) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{54}
}

type ConferenceEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfId     string `protobuf:"bytes,1,opt,name=conf_id,json=confId,proto3" json:"conf_id,omitempty"`
	InlineCode string `protobuf:"bytes,2,opt,name=inline_code,json=inlineCode,proto3" json:"inline_code,omitempty"`
}

func (x *ConferenceEventRequest) Reset() {
	*x = ConferenceEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConferenceEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConferenceEventRequest) ProtoMessage() {}

func (x *ConferenceEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConferenceEventRequest.ProtoReflect.Descriptor instead.
func (*ConferenceEventRequest) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{55}
}

func (x *ConferenceEventRequest) GetConfId() string {
	if x != nil {
		return x.ConfId
	}
	return ""
}

func (x *ConferenceEventRequest) GetInlineCode() string {
	if x != nil {
		return x.InlineCode
	}
	return ""
}

type ConferenceEventReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConferenceEventReply) Reset() {
	*x = ConferenceEventReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lineblocs_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConferenceEventReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConferenceEventReply) ProtoMessage() {}

func (x *ConferenceEventReply) ProtoReflect() protoreflect.Message {
	mi := &file_lineblocs_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConferenceEventReply.ProtoReflect.Descriptor instead.
func (*ConferenceEventReply) Descriptor() ([]byte, []int) {
	return file_lineblocs_proto_rawDescGZIP(), []int{56}
}

var File_lineblocs_proto protoreflect.FileDescriptor

var file_lineblocs_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6c, 0x69, 0x6e, 0x65, 0x62, 0x6c, 0x6f, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x67, 0x72, 0x70, 0x63, 0x22, 0x44, 0x0a, 0x0d, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x67,
	0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x67, 0x75, 0x70,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x2a, 0x0a,
	0x0b, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x49, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x0b, 0x43, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x22, 0x43, 0x0a, 0x09, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x0e, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x69, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x55,
	0x72, 0x69, 0x22, 0x14, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50,
	0x6c, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x28, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x22, 0x34, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x3c, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x27, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x27, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x47, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x47, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x65, 0x74,
	0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x58, 0x0a, 0x1a, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x49, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x90, 0x01, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x54, 0x53,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54,
	0x54, 0x53, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x62,
	0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c,
	0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x13,
	0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x39, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x44, 0x54, 0x4d, 0x46, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x37,
	0x0a, 0x16, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44,
	0x54, 0x4d, 0x46, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x11, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x12, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x22, 0xdd, 0x01, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x6c, 0x6f, 0x77,
	0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x69,
	0x64, 0x67, 0x65, 0x74, 0x12, 0x4c, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x69, 0x64, 0x67, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x61,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x61,
	0x72, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x18, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x6c, 0x6f, 0x77, 0x57,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xe8, 0x01, 0x0a, 0x1d, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x57,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6c,
	0x6f, 0x77, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x6c, 0x6f, 0x77,
	0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1d, 0x0a, 0x1b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x52, 0x0a, 0x14, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x53,
	0x0a, 0x15, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x8d, 0x01, 0x0a, 0x10, 0x42,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x54, 0x54, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x10, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1b,
	0x0a, 0x09, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x49, 0x64, 0x22, 0x30, 0x0a, 0x11, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x49, 0x64, 0x22, 0x31, 0x0a,
	0x0e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x54, 0x54, 0x53, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x64,
	0x22, 0x56, 0x0a, 0x18, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x4c, 0x65, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x67, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x52, 0x0a, 0x12, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3b, 0x0a, 0x16, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x60, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x13, 0x0a, 0x11, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61,
	0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x50, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x54, 0x61, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x19, 0x0a, 0x17, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x49, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x69, 0x22, 0x1a,
	0x0a, 0x18, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x49, 0x0a, 0x16, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x52, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x6f, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x6f, 0x68, 0x22, 0x6e, 0x0a, 0x1c, 0x43, 0x6f, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x49, 0x64, 0x12, 0x35, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0c, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x1c, 0x0a, 0x1a, 0x43, 0x6f, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x4b, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x52, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x32, 0xe2, 0x11, 0x0a,
	0x09, 0x4c, 0x69, 0x6e, 0x65, 0x62, 0x6c, 0x6f, 0x63, 0x73, 0x12, 0x38, 0x0a, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x13, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x11, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x11, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x14, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x47, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x50, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0a, 0x67,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x19, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x44, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x67, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x1d, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x18, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x12, 0x20, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x54, 0x53, 0x12, 0x17, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x54, 0x53, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x54, 0x54, 0x53, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x53, 0x0a,
	0x1b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x19, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x5d, 0x0a, 0x1b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x44, 0x54, 0x4d, 0x46, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
	0x73, 0x12, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x54, 0x4d, 0x46, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x54, 0x4d, 0x46, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x51, 0x0a, 0x1a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x12,
	0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x16, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x67, 0x6f, 0x74, 0x6f, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x12, 0x1e,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x6c, 0x6f,
	0x77, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x6c, 0x6f,
	0x77, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5d,
	0x0a, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x46,
	0x6c, 0x6f, 0x77, 0x12, 0x23, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x69, 0x64, 0x67, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x6c, 0x6f, 0x77,
	0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a,
	0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x69,
	0x6e, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x18,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x13, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x52, 0x69, 0x6e, 0x67, 0x69, 0x6e,
	0x67, 0x12, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x68, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x12, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x1a, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4b, 0x0a,
	0x11, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x12, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x12, 0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x54, 0x53, 0x12, 0x16, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x54, 0x54, 0x53, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x54, 0x54, 0x53, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x19,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x4c,
	0x65, 0x67, 0x41, 0x48, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x12, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x4c,
	0x65, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x4c,
	0x65, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x19, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x67, 0x42,
	0x48, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x12, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x67, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x5f, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x16, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x42,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x1a, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6a, 0x0a,
	0x20, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x57,
	0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x12, 0x22, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x19, 0x63, 0x6f, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x63,
	0x0a, 0x1d, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x12,
	0x20, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x1e, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x42, 0x04, 0x5a, 0x02, 0x2e, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lineblocs_proto_rawDescOnce sync.Once
	file_lineblocs_proto_rawDescData = file_lineblocs_proto_rawDesc
)

func file_lineblocs_proto_rawDescGZIP() []byte {
	file_lineblocs_proto_rawDescOnce.Do(func() {
		file_lineblocs_proto_rawDescData = protoimpl.X.CompressGZIP(file_lineblocs_proto_rawDescData)
	})
	return file_lineblocs_proto_rawDescData
}

var file_lineblocs_proto_msgTypes = make([]protoimpl.MessageInfo, 59)
var file_lineblocs_proto_goTypes = []interface{}{
	(*BridgeRequest)(nil),                 // 0: grpc.BridgeRequest
	(*BridgeReply)(nil),                   // 1: grpc.BridgeReply
	(*CallRequest)(nil),                   // 2: grpc.CallRequest
	(*CallReply)(nil),                     // 3: grpc.CallReply
	(*ChannelRequest)(nil),                // 4: grpc.ChannelRequest
	(*ChannelReply)(nil),                  // 5: grpc.ChannelReply
	(*RecordingPlayRequest)(nil),          // 6: grpc.RecordingPlayRequest
	(*RecordingPlayReply)(nil),            // 7: grpc.RecordingPlayReply
	(*Channel)(nil),                       // 8: grpc.Channel
	(*ChannelFetchRequest)(nil),           // 9: grpc.ChannelFetchRequest
	(*ChannelFetchReply)(nil),             // 10: grpc.ChannelFetchReply
	(*ConferenceRequest)(nil),             // 11: grpc.ConferenceRequest
	(*ConferenceReply)(nil),               // 12: grpc.ConferenceReply
	(*ChannelGetBridgeRequest)(nil),       // 13: grpc.ChannelGetBridgeRequest
	(*ChannelGetBridgeReply)(nil),         // 14: grpc.ChannelGetBridgeReply
	(*ChannelRemoveBridgeRequest)(nil),    // 15: grpc.ChannelRemoveBridgeRequest
	(*ChannelRemoveBridgeReply)(nil),      // 16: grpc.ChannelRemoveBridgeReply
	(*ChannelTTSRequest)(nil),             // 17: grpc.ChannelTTSRequest
	(*ChannelTTSReply)(nil),               // 18: grpc.ChannelTTSReply
	(*ChannelInputRequest)(nil),           // 19: grpc.ChannelInputRequest
	(*ChannelInputReply)(nil),             // 20: grpc.ChannelInputReply
	(*ChannelRemoveDTMFRequest)(nil),      // 21: grpc.ChannelRemoveDTMFRequest
	(*ChannelRemoveDTMFReply)(nil),        // 22: grpc.ChannelRemoveDTMFReply
	(*GenericChannelReq)(nil),             // 23: grpc.GenericChannelReq
	(*GenericChannelResp)(nil),            // 24: grpc.GenericChannelResp
	(*ChannelFlowWidgetRequest)(nil),      // 25: grpc.ChannelFlowWidgetRequest
	(*ChannelFlowWidgetReply)(nil),        // 26: grpc.ChannelFlowWidgetReply
	(*ChannelStartFlowWidgetRequest)(nil), // 27: grpc.ChannelStartFlowWidgetRequest
	(*ChannelStartFlowWidgetReply)(nil),   // 28: grpc.ChannelStartFlowWidgetReply
	(*BridgeChannelRequest)(nil),          // 29: grpc.BridgeChannelRequest
	(*BridgeChannelReply)(nil),            // 30: grpc.BridgeChannelReply
	(*BridgeChannelsRequest)(nil),         // 31: grpc.BridgeChannelsRequest
	(*BridgeChannelsReply)(nil),           // 32: grpc.BridgeChannelsReply
	(*BridgeTTSRequest)(nil),              // 33: grpc.BridgeTTSRequest
	(*GenericBridgeReq)(nil),              // 34: grpc.GenericBridgeReq
	(*GenericBridgeResp)(nil),             // 35: grpc.GenericBridgeResp
	(*BridgeTTSReply)(nil),                // 36: grpc.BridgeTTSReply
	(*BridgeAutomateLegRequest)(nil),      // 37: grpc.BridgeAutomateLegRequest
	(*BridgeAutomateLegReply)(nil),        // 38: grpc.BridgeAutomateLegReply
	(*BridgeEventRequest)(nil),            // 39: grpc.BridgeEventRequest
	(*BridgeEventReply)(nil),              // 40: grpc.BridgeEventReply
	(*RecordingDeleteRequest)(nil),        // 41: grpc.RecordingDeleteRequest
	(*RecordingDeleteReply)(nil),          // 42: grpc.RecordingDeleteReply
	(*RecordingTagRequest)(nil),           // 43: grpc.RecordingTagRequest
	(*RecordingTagReply)(nil),             // 44: grpc.RecordingTagReply
	(*RecordingTagDeleteRequest)(nil),     // 45: grpc.RecordingTagDeleteRequest
	(*RecordingTagDeleteReply)(nil),       // 46: grpc.RecordingTagDeleteReply
	(*Recording)(nil),                     // 47: grpc.Recording
	(*SessionRecordingsRequest)(nil),      // 48: grpc.SessionRecordingsRequest
	(*SessionRecordingsReply)(nil),        // 49: grpc.SessionRecordingsReply
	(*Participant)(nil),                   // 50: grpc.Participant
	(*ConferenceParticipantRequest)(nil),  // 51: grpc.ConferenceParticipantRequest
	(*ConferenceParticipantReply)(nil),    // 52: grpc.ConferenceParticipantReply
	(*ConferenceModeratorRequest)(nil),    // 53: grpc.ConferenceModeratorRequest
	(*ConferenceModeratorReply)(nil),      // 54: grpc.ConferenceModeratorReply
	(*ConferenceEventRequest)(nil),        // 55: grpc.ConferenceEventRequest
	(*ConferenceEventReply)(nil),          // 56: grpc.ConferenceEventReply
	nil,                                   // 57: grpc.ChannelFlowWidgetRequest.EventVarsEntry
	nil,                                   // 58: grpc.ChannelStartFlowWidgetRequest.EventVarsEntry
}
var file_lineblocs_proto_depIdxs = []int32{
	8,  // 0: grpc.ChannelFetchReply.channel:type_name -> grpc.Channel
	57, // 1: grpc.ChannelFlowWidgetRequest.event_vars:type_name -> grpc.ChannelFlowWidgetRequest.EventVarsEntry
	58, // 2: grpc.ChannelStartFlowWidgetRequest.event_vars:type_name -> grpc.ChannelStartFlowWidgetRequest.EventVarsEntry
	47, // 3: grpc.SessionRecordingsReply.recordings:type_name -> grpc.Recording
	50, // 4: grpc.ConferenceParticipantRequest.participants:type_name -> grpc.Participant
	0,  // 5: grpc.Lineblocs.createBridge:input_type -> grpc.BridgeRequest
	2,  // 6: grpc.Lineblocs.createCall:input_type -> grpc.CallRequest
	4,  // 7: grpc.Lineblocs.addChannel:input_type -> grpc.ChannelRequest
	6,  // 8: grpc.Lineblocs.playRecording:input_type -> grpc.RecordingPlayRequest
	9,  // 9: grpc.Lineblocs.getChannel:input_type -> grpc.ChannelFetchRequest
	11, // 10: grpc.Lineblocs.createConference:input_type -> grpc.ConferenceRequest
	13, // 11: grpc.Lineblocs.channel_getBridge:input_type -> grpc.ChannelGetBridgeRequest
	15, // 12: grpc.Lineblocs.channel_removeFromBridge:input_type -> grpc.ChannelRemoveBridgeRequest
	17, // 13: grpc.Lineblocs.channel_playTTS:input_type -> grpc.ChannelTTSRequest
	19, // 14: grpc.Lineblocs.channel_startAcceptingInput:input_type -> grpc.ChannelInputRequest
	21, // 15: grpc.Lineblocs.channel_removeDTMFListeners:input_type -> grpc.ChannelRemoveDTMFRequest
	23, // 16: grpc.Lineblocs.channel_automateCallHangup:input_type -> grpc.GenericChannelReq
	25, // 17: grpc.Lineblocs.channel_gotoFlowWidget:input_type -> grpc.ChannelFlowWidgetRequest
	27, // 18: grpc.Lineblocs.channel_startFlow:input_type -> grpc.ChannelStartFlowWidgetRequest
	23, // 19: grpc.Lineblocs.channel_startRinging:input_type -> grpc.GenericChannelReq
	23, // 20: grpc.Lineblocs.channel_stopRinging:input_type -> grpc.GenericChannelReq
	23, // 21: grpc.Lineblocs.channel_hangup:input_type -> grpc.GenericChannelReq
	29, // 22: grpc.Lineblocs.bridge_addChannel:input_type -> grpc.BridgeChannelRequest
	31, // 23: grpc.Lineblocs.bridge_addChannels:input_type -> grpc.BridgeChannelsRequest
	33, // 24: grpc.Lineblocs.bridge_playTTS:input_type -> grpc.BridgeTTSRequest
	37, // 25: grpc.Lineblocs.bridge_automateLegAHangup:input_type -> grpc.BridgeAutomateLegRequest
	37, // 26: grpc.Lineblocs.bridge_automateLegBHangup:input_type -> grpc.BridgeAutomateLegRequest
	34, // 27: grpc.Lineblocs.bridge_destroy:input_type -> grpc.GenericBridgeReq
	39, // 28: grpc.Lineblocs.bridge_attachEventListener:input_type -> grpc.BridgeEventRequest
	51, // 29: grpc.Lineblocs.conference_addWaitingParticipant:input_type -> grpc.ConferenceParticipantRequest
	51, // 30: grpc.Lineblocs.conference_addParticipant:input_type -> grpc.ConferenceParticipantRequest
	53, // 31: grpc.Lineblocs.conference_setModeratorInConf:input_type -> grpc.ConferenceModeratorRequest
	55, // 32: grpc.Lineblocs.conference_attachEventListener:input_type -> grpc.ConferenceEventRequest
	1,  // 33: grpc.Lineblocs.createBridge:output_type -> grpc.BridgeReply
	3,  // 34: grpc.Lineblocs.createCall:output_type -> grpc.CallReply
	5,  // 35: grpc.Lineblocs.addChannel:output_type -> grpc.ChannelReply
	7,  // 36: grpc.Lineblocs.playRecording:output_type -> grpc.RecordingPlayReply
	10, // 37: grpc.Lineblocs.getChannel:output_type -> grpc.ChannelFetchReply
	12, // 38: grpc.Lineblocs.createConference:output_type -> grpc.ConferenceReply
	14, // 39: grpc.Lineblocs.channel_getBridge:output_type -> grpc.ChannelGetBridgeReply
	16, // 40: grpc.Lineblocs.channel_removeFromBridge:output_type -> grpc.ChannelRemoveBridgeReply
	18, // 41: grpc.Lineblocs.channel_playTTS:output_type -> grpc.ChannelTTSReply
	20, // 42: grpc.Lineblocs.channel_startAcceptingInput:output_type -> grpc.ChannelInputReply
	22, // 43: grpc.Lineblocs.channel_removeDTMFListeners:output_type -> grpc.ChannelRemoveDTMFReply
	24, // 44: grpc.Lineblocs.channel_automateCallHangup:output_type -> grpc.GenericChannelResp
	26, // 45: grpc.Lineblocs.channel_gotoFlowWidget:output_type -> grpc.ChannelFlowWidgetReply
	28, // 46: grpc.Lineblocs.channel_startFlow:output_type -> grpc.ChannelStartFlowWidgetReply
	24, // 47: grpc.Lineblocs.channel_startRinging:output_type -> grpc.GenericChannelResp
	24, // 48: grpc.Lineblocs.channel_stopRinging:output_type -> grpc.GenericChannelResp
	24, // 49: grpc.Lineblocs.channel_hangup:output_type -> grpc.GenericChannelResp
	30, // 50: grpc.Lineblocs.bridge_addChannel:output_type -> grpc.BridgeChannelReply
	32, // 51: grpc.Lineblocs.bridge_addChannels:output_type -> grpc.BridgeChannelsReply
	36, // 52: grpc.Lineblocs.bridge_playTTS:output_type -> grpc.BridgeTTSReply
	38, // 53: grpc.Lineblocs.bridge_automateLegAHangup:output_type -> grpc.BridgeAutomateLegReply
	38, // 54: grpc.Lineblocs.bridge_automateLegBHangup:output_type -> grpc.BridgeAutomateLegReply
	35, // 55: grpc.Lineblocs.bridge_destroy:output_type -> grpc.GenericBridgeResp
	40, // 56: grpc.Lineblocs.bridge_attachEventListener:output_type -> grpc.BridgeEventReply
	52, // 57: grpc.Lineblocs.conference_addWaitingParticipant:output_type -> grpc.ConferenceParticipantReply
	52, // 58: grpc.Lineblocs.conference_addParticipant:output_type -> grpc.ConferenceParticipantReply
	54, // 59: grpc.Lineblocs.conference_setModeratorInConf:output_type -> grpc.ConferenceModeratorReply
	56, // 60: grpc.Lineblocs.conference_attachEventListener:output_type -> grpc.ConferenceEventReply
	33, // [33:61] is the sub-list for method output_type
	5,  // [5:33] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_lineblocs_proto_init() }
func file_lineblocs_proto_init() {
	if File_lineblocs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_lineblocs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BridgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BridgeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordingPlayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordingPlayReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelFetchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelFetchReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConferenceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelGetBridgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelGetBridgeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelRemoveBridgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelRemoveBridgeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelTTSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelTTSReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelInputRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelInputReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelRemoveDTMFRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelRemoveDTMFReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericChannelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericChannelResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelFlowWidgetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelFlowWidgetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelStartFlowWidgetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelStartFlowWidgetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BridgeChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BridgeChannelReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BridgeChannelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BridgeChannelsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BridgeTTSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericBridgeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericBridgeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BridgeTTSReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BridgeAutomateLegRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BridgeAutomateLegReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BridgeEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BridgeEventReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordingDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordingDeleteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordingTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordingTagReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordingTagDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordingTagDeleteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Recording); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionRecordingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionRecordingsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Participant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConferenceParticipantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConferenceParticipantReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConferenceModeratorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConferenceModeratorReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConferenceEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lineblocs_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConferenceEventReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lineblocs_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   59,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_lineblocs_proto_goTypes,
		DependencyIndexes: file_lineblocs_proto_depIdxs,
		MessageInfos:      file_lineblocs_proto_msgTypes,
	}.Build()
	File_lineblocs_proto = out.File
	file_lineblocs_proto_rawDesc = nil
	file_lineblocs_proto_goTypes = nil
	file_lineblocs_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LineblocsClient is the client API for Lineblocs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LineblocsClient interface {
	// general purpose
	CreateBridge(ctx context.Context, in *BridgeRequest, opts ...grpc.CallOption) (*BridgeReply, error)
	CreateCall(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallReply, error)
	AddChannel(ctx context.Context, in *ChannelRequest, opts ...grpc.CallOption) (*ChannelReply, error)
	PlayRecording(ctx context.Context, in *RecordingPlayRequest, opts ...grpc.CallOption) (*RecordingPlayReply, error)
	GetChannel(ctx context.Context, in *ChannelFetchRequest, opts ...grpc.CallOption) (*ChannelFetchReply, error)
	CreateConference(ctx context.Context, in *ConferenceRequest, opts ...grpc.CallOption) (*ConferenceReply, error)
	// channel functions
	ChannelGetBridge(ctx context.Context, in *ChannelGetBridgeRequest, opts ...grpc.CallOption) (*ChannelGetBridgeReply, error)
	ChannelRemoveFromBridge(ctx context.Context, in *ChannelRemoveBridgeRequest, opts ...grpc.CallOption) (*ChannelRemoveBridgeReply, error)
	ChannelPlayTTS(ctx context.Context, in *ChannelTTSRequest, opts ...grpc.CallOption) (*ChannelTTSReply, error)
	ChannelStartAcceptingInput(ctx context.Context, in *ChannelInputRequest, opts ...grpc.CallOption) (*ChannelInputReply, error)
	ChannelRemoveDTMFListeners(ctx context.Context, in *ChannelRemoveDTMFRequest, opts ...grpc.CallOption) (*ChannelRemoveDTMFReply, error)
	ChannelAutomateCallHangup(ctx context.Context, in *GenericChannelReq, opts ...grpc.CallOption) (*GenericChannelResp, error)
	ChannelGotoFlowWidget(ctx context.Context, in *ChannelFlowWidgetRequest, opts ...grpc.CallOption) (*ChannelFlowWidgetReply, error)
	ChannelStartFlow(ctx context.Context, in *ChannelStartFlowWidgetRequest, opts ...grpc.CallOption) (*ChannelStartFlowWidgetReply, error)
	ChannelStartRinging(ctx context.Context, in *GenericChannelReq, opts ...grpc.CallOption) (*GenericChannelResp, error)
	ChannelStopRinging(ctx context.Context, in *GenericChannelReq, opts ...grpc.CallOption) (*GenericChannelResp, error)
	ChannelHangup(ctx context.Context, in *GenericChannelReq, opts ...grpc.CallOption) (*GenericChannelResp, error)
	// bridge functions
	BridgeAddChannel(ctx context.Context, in *BridgeChannelRequest, opts ...grpc.CallOption) (*BridgeChannelReply, error)
	BridgeAddChannels(ctx context.Context, in *BridgeChannelsRequest, opts ...grpc.CallOption) (*BridgeChannelsReply, error)
	BridgePlayTTS(ctx context.Context, in *BridgeTTSRequest, opts ...grpc.CallOption) (*BridgeTTSReply, error)
	BridgeAutomateLegAHangup(ctx context.Context, in *BridgeAutomateLegRequest, opts ...grpc.CallOption) (*BridgeAutomateLegReply, error)
	BridgeAutomateLegBHangup(ctx context.Context, in *BridgeAutomateLegRequest, opts ...grpc.CallOption) (*BridgeAutomateLegReply, error)
	BridgeDestroy(ctx context.Context, in *GenericBridgeReq, opts ...grpc.CallOption) (*GenericBridgeResp, error)
	BridgeAttachEventListener(ctx context.Context, in *BridgeEventRequest, opts ...grpc.CallOption) (*BridgeEventReply, error)
	// conference functions
	ConferenceAddWaitingParticipant(ctx context.Context, in *ConferenceParticipantRequest, opts ...grpc.CallOption) (*ConferenceParticipantReply, error)
	ConferenceAddParticipant(ctx context.Context, in *ConferenceParticipantRequest, opts ...grpc.CallOption) (*ConferenceParticipantReply, error)
	ConferenceSetModeratorInConf(ctx context.Context, in *ConferenceModeratorRequest, opts ...grpc.CallOption) (*ConferenceModeratorReply, error)
	ConferenceAttachEventListener(ctx context.Context, in *ConferenceEventRequest, opts ...grpc.CallOption) (*ConferenceEventReply, error)
}

type lineblocsClient struct {
	cc grpc.ClientConnInterface
}

func NewLineblocsClient(cc grpc.ClientConnInterface) LineblocsClient {
	return &lineblocsClient{cc}
}

func (c *lineblocsClient) CreateBridge(ctx context.Context, in *BridgeRequest, opts ...grpc.CallOption) (*BridgeReply, error) {
	out := new(BridgeReply)
	err := c.cc.Invoke(ctx, "/grpc.Lineblocs/createBridge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lineblocsClient) CreateCall(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallReply, error) {
	out := new(CallReply)
	err := c.cc.Invoke(ctx, "/grpc.Lineblocs/createCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lineblocsClient) AddChannel(ctx context.Context, in *ChannelRequest, opts ...grpc.CallOption) (*ChannelReply, error) {
	out := new(ChannelReply)
	err := c.cc.Invoke(ctx, "/grpc.Lineblocs/addChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lineblocsClient) PlayRecording(ctx context.Context, in *RecordingPlayRequest, opts ...grpc.CallOption) (*RecordingPlayReply, error) {
	out := new(RecordingPlayReply)
	err := c.cc.Invoke(ctx, "/grpc.Lineblocs/playRecording", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lineblocsClient) GetChannel(ctx context.Context, in *ChannelFetchRequest, opts ...grpc.CallOption) (*ChannelFetchReply, error) {
	out := new(ChannelFetchReply)
	err := c.cc.Invoke(ctx, "/grpc.Lineblocs/getChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lineblocsClient) CreateConference(ctx context.Context, in *ConferenceRequest, opts ...grpc.CallOption) (*ConferenceReply, error) {
	out := new(ConferenceReply)
	err := c.cc.Invoke(ctx, "/grpc.Lineblocs/createConference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lineblocsClient) ChannelGetBridge(ctx context.Context, in *ChannelGetBridgeRequest, opts ...grpc.CallOption) (*ChannelGetBridgeReply, error) {
	out := new(ChannelGetBridgeReply)
	err := c.cc.Invoke(ctx, "/grpc.Lineblocs/channel_getBridge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lineblocsClient) ChannelRemoveFromBridge(ctx context.Context, in *ChannelRemoveBridgeRequest, opts ...grpc.CallOption) (*ChannelRemoveBridgeReply, error) {
	out := new(ChannelRemoveBridgeReply)
	err := c.cc.Invoke(ctx, "/grpc.Lineblocs/channel_removeFromBridge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lineblocsClient) ChannelPlayTTS(ctx context.Context, in *ChannelTTSRequest, opts ...grpc.CallOption) (*ChannelTTSReply, error) {
	out := new(ChannelTTSReply)
	err := c.cc.Invoke(ctx, "/grpc.Lineblocs/channel_playTTS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lineblocsClient) ChannelStartAcceptingInput(ctx context.Context, in *ChannelInputRequest, opts ...grpc.CallOption) (*ChannelInputReply, error) {
	out := new(ChannelInputReply)
	err := c.cc.Invoke(ctx, "/grpc.Lineblocs/channel_startAcceptingInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lineblocsClient) ChannelRemoveDTMFListeners(ctx context.Context, in *ChannelRemoveDTMFRequest, opts ...grpc.CallOption) (*ChannelRemoveDTMFReply, error) {
	out := new(ChannelRemoveDTMFReply)
	err := c.cc.Invoke(ctx, "/grpc.Lineblocs/channel_removeDTMFListeners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lineblocsClient) ChannelAutomateCallHangup(ctx context.Context, in *GenericChannelReq, opts ...grpc.CallOption) (*GenericChannelResp, error) {
	out := new(GenericChannelResp)
	err := c.cc.Invoke(ctx, "/grpc.Lineblocs/channel_automateCallHangup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lineblocsClient) ChannelGotoFlowWidget(ctx context.Context, in *ChannelFlowWidgetRequest, opts ...grpc.CallOption) (*ChannelFlowWidgetReply, error) {
	out := new(ChannelFlowWidgetReply)
	err := c.cc.Invoke(ctx, "/grpc.Lineblocs/channel_gotoFlowWidget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lineblocsClient) ChannelStartFlow(ctx context.Context, in *ChannelStartFlowWidgetRequest, opts ...grpc.CallOption) (*ChannelStartFlowWidgetReply, error) {
	out := new(ChannelStartFlowWidgetReply)
	err := c.cc.Invoke(ctx, "/grpc.Lineblocs/channel_startFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lineblocsClient) ChannelStartRinging(ctx context.Context, in *GenericChannelReq, opts ...grpc.CallOption) (*GenericChannelResp, error) {
	out := new(GenericChannelResp)
	err := c.cc.Invoke(ctx, "/grpc.Lineblocs/channel_startRinging", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lineblocsClient) ChannelStopRinging(ctx context.Context, in *GenericChannelReq, opts ...grpc.CallOption) (*GenericChannelResp, error) {
	out := new(GenericChannelResp)
	err := c.cc.Invoke(ctx, "/grpc.Lineblocs/channel_stopRinging", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lineblocsClient) ChannelHangup(ctx context.Context, in *GenericChannelReq, opts ...grpc.CallOption) (*GenericChannelResp, error) {
	out := new(GenericChannelResp)
	err := c.cc.Invoke(ctx, "/grpc.Lineblocs/channel_hangup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lineblocsClient) BridgeAddChannel(ctx context.Context, in *BridgeChannelRequest, opts ...grpc.CallOption) (*BridgeChannelReply, error) {
	out := new(BridgeChannelReply)
	err := c.cc.Invoke(ctx, "/grpc.Lineblocs/bridge_addChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lineblocsClient) BridgeAddChannels(ctx context.Context, in *BridgeChannelsRequest, opts ...grpc.CallOption) (*BridgeChannelsReply, error) {
	out := new(BridgeChannelsReply)
	err := c.cc.Invoke(ctx, "/grpc.Lineblocs/bridge_addChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lineblocsClient) BridgePlayTTS(ctx context.Context, in *BridgeTTSRequest, opts ...grpc.CallOption) (*BridgeTTSReply, error) {
	out := new(BridgeTTSReply)
	err := c.cc.Invoke(ctx, "/grpc.Lineblocs/bridge_playTTS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lineblocsClient) BridgeAutomateLegAHangup(ctx context.Context, in *BridgeAutomateLegRequest, opts ...grpc.CallOption) (*BridgeAutomateLegReply, error) {
	out := new(BridgeAutomateLegReply)
	err := c.cc.Invoke(ctx, "/grpc.Lineblocs/bridge_automateLegAHangup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lineblocsClient) BridgeAutomateLegBHangup(ctx context.Context, in *BridgeAutomateLegRequest, opts ...grpc.CallOption) (*BridgeAutomateLegReply, error) {
	out := new(BridgeAutomateLegReply)
	err := c.cc.Invoke(ctx, "/grpc.Lineblocs/bridge_automateLegBHangup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lineblocsClient) BridgeDestroy(ctx context.Context, in *GenericBridgeReq, opts ...grpc.CallOption) (*GenericBridgeResp, error) {
	out := new(GenericBridgeResp)
	err := c.cc.Invoke(ctx, "/grpc.Lineblocs/bridge_destroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lineblocsClient) BridgeAttachEventListener(ctx context.Context, in *BridgeEventRequest, opts ...grpc.CallOption) (*BridgeEventReply, error) {
	out := new(BridgeEventReply)
	err := c.cc.Invoke(ctx, "/grpc.Lineblocs/bridge_attachEventListener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lineblocsClient) ConferenceAddWaitingParticipant(ctx context.Context, in *ConferenceParticipantRequest, opts ...grpc.CallOption) (*ConferenceParticipantReply, error) {
	out := new(ConferenceParticipantReply)
	err := c.cc.Invoke(ctx, "/grpc.Lineblocs/conference_addWaitingParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lineblocsClient) ConferenceAddParticipant(ctx context.Context, in *ConferenceParticipantRequest, opts ...grpc.CallOption) (*ConferenceParticipantReply, error) {
	out := new(ConferenceParticipantReply)
	err := c.cc.Invoke(ctx, "/grpc.Lineblocs/conference_addParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lineblocsClient) ConferenceSetModeratorInConf(ctx context.Context, in *ConferenceModeratorRequest, opts ...grpc.CallOption) (*ConferenceModeratorReply, error) {
	out := new(ConferenceModeratorReply)
	err := c.cc.Invoke(ctx, "/grpc.Lineblocs/conference_setModeratorInConf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lineblocsClient) ConferenceAttachEventListener(ctx context.Context, in *ConferenceEventRequest, opts ...grpc.CallOption) (*ConferenceEventReply, error) {
	out := new(ConferenceEventReply)
	err := c.cc.Invoke(ctx, "/grpc.Lineblocs/conference_attachEventListener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LineblocsServer is the server API for Lineblocs service.
type LineblocsServer interface {
	// general purpose
	CreateBridge(context.Context, *BridgeRequest) (*BridgeReply, error)
	CreateCall(context.Context, *CallRequest) (*CallReply, error)
	AddChannel(context.Context, *ChannelRequest) (*ChannelReply, error)
	PlayRecording(context.Context, *RecordingPlayRequest) (*RecordingPlayReply, error)
	GetChannel(context.Context, *ChannelFetchRequest) (*ChannelFetchReply, error)
	CreateConference(context.Context, *ConferenceRequest) (*ConferenceReply, error)
	// channel functions
	ChannelGetBridge(context.Context, *ChannelGetBridgeRequest) (*ChannelGetBridgeReply, error)
	ChannelRemoveFromBridge(context.Context, *ChannelRemoveBridgeRequest) (*ChannelRemoveBridgeReply, error)
	ChannelPlayTTS(context.Context, *ChannelTTSRequest) (*ChannelTTSReply, error)
	ChannelStartAcceptingInput(context.Context, *ChannelInputRequest) (*ChannelInputReply, error)
	ChannelRemoveDTMFListeners(context.Context, *ChannelRemoveDTMFRequest) (*ChannelRemoveDTMFReply, error)
	ChannelAutomateCallHangup(context.Context, *GenericChannelReq) (*GenericChannelResp, error)
	ChannelGotoFlowWidget(context.Context, *ChannelFlowWidgetRequest) (*ChannelFlowWidgetReply, error)
	ChannelStartFlow(context.Context, *ChannelStartFlowWidgetRequest) (*ChannelStartFlowWidgetReply, error)
	ChannelStartRinging(context.Context, *GenericChannelReq) (*GenericChannelResp, error)
	ChannelStopRinging(context.Context, *GenericChannelReq) (*GenericChannelResp, error)
	ChannelHangup(context.Context, *GenericChannelReq) (*GenericChannelResp, error)
	// bridge functions
	BridgeAddChannel(context.Context, *BridgeChannelRequest) (*BridgeChannelReply, error)
	BridgeAddChannels(context.Context, *BridgeChannelsRequest) (*BridgeChannelsReply, error)
	BridgePlayTTS(context.Context, *BridgeTTSRequest) (*BridgeTTSReply, error)
	BridgeAutomateLegAHangup(context.Context, *BridgeAutomateLegRequest) (*BridgeAutomateLegReply, error)
	BridgeAutomateLegBHangup(context.Context, *BridgeAutomateLegRequest) (*BridgeAutomateLegReply, error)
	BridgeDestroy(context.Context, *GenericBridgeReq) (*GenericBridgeResp, error)
	BridgeAttachEventListener(context.Context, *BridgeEventRequest) (*BridgeEventReply, error)
	// conference functions
	ConferenceAddWaitingParticipant(context.Context, *ConferenceParticipantRequest) (*ConferenceParticipantReply, error)
	ConferenceAddParticipant(context.Context, *ConferenceParticipantRequest) (*ConferenceParticipantReply, error)
	ConferenceSetModeratorInConf(context.Context, *ConferenceModeratorRequest) (*ConferenceModeratorReply, error)
	ConferenceAttachEventListener(context.Context, *ConferenceEventRequest) (*ConferenceEventReply, error)
}

// UnimplementedLineblocsServer can be embedded to have forward compatible implementations.
type UnimplementedLineblocsServer struct {
}

func (*UnimplementedLineblocsServer) CreateBridge(context.Context, *BridgeRequest) (*BridgeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBridge not implemented")
}
func (*UnimplementedLineblocsServer) CreateCall(context.Context, *CallRequest) (*CallReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCall not implemented")
}
func (*UnimplementedLineblocsServer) AddChannel(context.Context, *ChannelRequest) (*ChannelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddChannel not implemented")
}
func (*UnimplementedLineblocsServer) PlayRecording(context.Context, *RecordingPlayRequest) (*RecordingPlayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayRecording not implemented")
}
func (*UnimplementedLineblocsServer) GetChannel(context.Context, *ChannelFetchRequest) (*ChannelFetchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannel not implemented")
}
func (*UnimplementedLineblocsServer) CreateConference(context.Context, *ConferenceRequest) (*ConferenceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConference not implemented")
}
func (*UnimplementedLineblocsServer) ChannelGetBridge(context.Context, *ChannelGetBridgeRequest) (*ChannelGetBridgeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelGetBridge not implemented")
}
func (*UnimplementedLineblocsServer) ChannelRemoveFromBridge(context.Context, *ChannelRemoveBridgeRequest) (*ChannelRemoveBridgeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelRemoveFromBridge not implemented")
}
func (*UnimplementedLineblocsServer) ChannelPlayTTS(context.Context, *ChannelTTSRequest) (*ChannelTTSReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelPlayTTS not implemented")
}
func (*UnimplementedLineblocsServer) ChannelStartAcceptingInput(context.Context, *ChannelInputRequest) (*ChannelInputReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelStartAcceptingInput not implemented")
}
func (*UnimplementedLineblocsServer) ChannelRemoveDTMFListeners(context.Context, *ChannelRemoveDTMFRequest) (*ChannelRemoveDTMFReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelRemoveDTMFListeners not implemented")
}
func (*UnimplementedLineblocsServer) ChannelAutomateCallHangup(context.Context, *GenericChannelReq) (*GenericChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelAutomateCallHangup not implemented")
}
func (*UnimplementedLineblocsServer) ChannelGotoFlowWidget(context.Context, *ChannelFlowWidgetRequest) (*ChannelFlowWidgetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelGotoFlowWidget not implemented")
}
func (*UnimplementedLineblocsServer) ChannelStartFlow(context.Context, *ChannelStartFlowWidgetRequest) (*ChannelStartFlowWidgetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelStartFlow not implemented")
}
func (*UnimplementedLineblocsServer) ChannelStartRinging(context.Context, *GenericChannelReq) (*GenericChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelStartRinging not implemented")
}
func (*UnimplementedLineblocsServer) ChannelStopRinging(context.Context, *GenericChannelReq) (*GenericChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelStopRinging not implemented")
}
func (*UnimplementedLineblocsServer) ChannelHangup(context.Context, *GenericChannelReq) (*GenericChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelHangup not implemented")
}
func (*UnimplementedLineblocsServer) BridgeAddChannel(context.Context, *BridgeChannelRequest) (*BridgeChannelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeAddChannel not implemented")
}
func (*UnimplementedLineblocsServer) BridgeAddChannels(context.Context, *BridgeChannelsRequest) (*BridgeChannelsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeAddChannels not implemented")
}
func (*UnimplementedLineblocsServer) BridgePlayTTS(context.Context, *BridgeTTSRequest) (*BridgeTTSReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgePlayTTS not implemented")
}
func (*UnimplementedLineblocsServer) BridgeAutomateLegAHangup(context.Context, *BridgeAutomateLegRequest) (*BridgeAutomateLegReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeAutomateLegAHangup not implemented")
}
func (*UnimplementedLineblocsServer) BridgeAutomateLegBHangup(context.Context, *BridgeAutomateLegRequest) (*BridgeAutomateLegReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeAutomateLegBHangup not implemented")
}
func (*UnimplementedLineblocsServer) BridgeDestroy(context.Context, *GenericBridgeReq) (*GenericBridgeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeDestroy not implemented")
}
func (*UnimplementedLineblocsServer) BridgeAttachEventListener(context.Context, *BridgeEventRequest) (*BridgeEventReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeAttachEventListener not implemented")
}
func (*UnimplementedLineblocsServer) ConferenceAddWaitingParticipant(context.Context, *ConferenceParticipantRequest) (*ConferenceParticipantReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConferenceAddWaitingParticipant not implemented")
}
func (*UnimplementedLineblocsServer) ConferenceAddParticipant(context.Context, *ConferenceParticipantRequest) (*ConferenceParticipantReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConferenceAddParticipant not implemented")
}
func (*UnimplementedLineblocsServer) ConferenceSetModeratorInConf(context.Context, *ConferenceModeratorRequest) (*ConferenceModeratorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConferenceSetModeratorInConf not implemented")
}
func (*UnimplementedLineblocsServer) ConferenceAttachEventListener(context.Context, *ConferenceEventRequest) (*ConferenceEventReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConferenceAttachEventListener not implemented")
}

func RegisterLineblocsServer(s *grpc.Server, srv LineblocsServer) {
	s.RegisterService(&_Lineblocs_serviceDesc, srv)
}

func _Lineblocs_CreateBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BridgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LineblocsServer).CreateBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Lineblocs/CreateBridge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LineblocsServer).CreateBridge(ctx, req.(*BridgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lineblocs_CreateCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LineblocsServer).CreateCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Lineblocs/CreateCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LineblocsServer).CreateCall(ctx, req.(*CallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lineblocs_AddChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LineblocsServer).AddChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Lineblocs/AddChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LineblocsServer).AddChannel(ctx, req.(*ChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lineblocs_PlayRecording_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordingPlayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LineblocsServer).PlayRecording(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Lineblocs/PlayRecording",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LineblocsServer).PlayRecording(ctx, req.(*RecordingPlayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lineblocs_GetChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelFetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LineblocsServer).GetChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Lineblocs/GetChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LineblocsServer).GetChannel(ctx, req.(*ChannelFetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lineblocs_CreateConference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LineblocsServer).CreateConference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Lineblocs/CreateConference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LineblocsServer).CreateConference(ctx, req.(*ConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lineblocs_ChannelGetBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelGetBridgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LineblocsServer).ChannelGetBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Lineblocs/ChannelGetBridge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LineblocsServer).ChannelGetBridge(ctx, req.(*ChannelGetBridgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lineblocs_ChannelRemoveFromBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelRemoveBridgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LineblocsServer).ChannelRemoveFromBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Lineblocs/ChannelRemoveFromBridge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LineblocsServer).ChannelRemoveFromBridge(ctx, req.(*ChannelRemoveBridgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lineblocs_ChannelPlayTTS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelTTSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LineblocsServer).ChannelPlayTTS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Lineblocs/ChannelPlayTTS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LineblocsServer).ChannelPlayTTS(ctx, req.(*ChannelTTSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lineblocs_ChannelStartAcceptingInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LineblocsServer).ChannelStartAcceptingInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Lineblocs/ChannelStartAcceptingInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LineblocsServer).ChannelStartAcceptingInput(ctx, req.(*ChannelInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lineblocs_ChannelRemoveDTMFListeners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelRemoveDTMFRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LineblocsServer).ChannelRemoveDTMFListeners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Lineblocs/ChannelRemoveDTMFListeners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LineblocsServer).ChannelRemoveDTMFListeners(ctx, req.(*ChannelRemoveDTMFRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lineblocs_ChannelAutomateCallHangup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenericChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LineblocsServer).ChannelAutomateCallHangup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Lineblocs/ChannelAutomateCallHangup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LineblocsServer).ChannelAutomateCallHangup(ctx, req.(*GenericChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lineblocs_ChannelGotoFlowWidget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelFlowWidgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LineblocsServer).ChannelGotoFlowWidget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Lineblocs/ChannelGotoFlowWidget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LineblocsServer).ChannelGotoFlowWidget(ctx, req.(*ChannelFlowWidgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lineblocs_ChannelStartFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelStartFlowWidgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LineblocsServer).ChannelStartFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Lineblocs/ChannelStartFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LineblocsServer).ChannelStartFlow(ctx, req.(*ChannelStartFlowWidgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lineblocs_ChannelStartRinging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenericChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LineblocsServer).ChannelStartRinging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Lineblocs/ChannelStartRinging",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LineblocsServer).ChannelStartRinging(ctx, req.(*GenericChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lineblocs_ChannelStopRinging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenericChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LineblocsServer).ChannelStopRinging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Lineblocs/ChannelStopRinging",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LineblocsServer).ChannelStopRinging(ctx, req.(*GenericChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lineblocs_ChannelHangup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenericChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LineblocsServer).ChannelHangup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Lineblocs/ChannelHangup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LineblocsServer).ChannelHangup(ctx, req.(*GenericChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lineblocs_BridgeAddChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BridgeChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LineblocsServer).BridgeAddChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Lineblocs/BridgeAddChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LineblocsServer).BridgeAddChannel(ctx, req.(*BridgeChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lineblocs_BridgeAddChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BridgeChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LineblocsServer).BridgeAddChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Lineblocs/BridgeAddChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LineblocsServer).BridgeAddChannels(ctx, req.(*BridgeChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lineblocs_BridgePlayTTS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BridgeTTSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LineblocsServer).BridgePlayTTS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Lineblocs/BridgePlayTTS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LineblocsServer).BridgePlayTTS(ctx, req.(*BridgeTTSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lineblocs_BridgeAutomateLegAHangup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BridgeAutomateLegRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LineblocsServer).BridgeAutomateLegAHangup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Lineblocs/BridgeAutomateLegAHangup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LineblocsServer).BridgeAutomateLegAHangup(ctx, req.(*BridgeAutomateLegRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lineblocs_BridgeAutomateLegBHangup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BridgeAutomateLegRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LineblocsServer).BridgeAutomateLegBHangup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Lineblocs/BridgeAutomateLegBHangup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LineblocsServer).BridgeAutomateLegBHangup(ctx, req.(*BridgeAutomateLegRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lineblocs_BridgeDestroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenericBridgeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LineblocsServer).BridgeDestroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Lineblocs/BridgeDestroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LineblocsServer).BridgeDestroy(ctx, req.(*GenericBridgeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lineblocs_BridgeAttachEventListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BridgeEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LineblocsServer).BridgeAttachEventListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Lineblocs/BridgeAttachEventListener",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LineblocsServer).BridgeAttachEventListener(ctx, req.(*BridgeEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lineblocs_ConferenceAddWaitingParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConferenceParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LineblocsServer).ConferenceAddWaitingParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Lineblocs/ConferenceAddWaitingParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LineblocsServer).ConferenceAddWaitingParticipant(ctx, req.(*ConferenceParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lineblocs_ConferenceAddParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConferenceParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LineblocsServer).ConferenceAddParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Lineblocs/ConferenceAddParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LineblocsServer).ConferenceAddParticipant(ctx, req.(*ConferenceParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lineblocs_ConferenceSetModeratorInConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConferenceModeratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LineblocsServer).ConferenceSetModeratorInConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Lineblocs/ConferenceSetModeratorInConf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LineblocsServer).ConferenceSetModeratorInConf(ctx, req.(*ConferenceModeratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lineblocs_ConferenceAttachEventListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConferenceEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LineblocsServer).ConferenceAttachEventListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Lineblocs/ConferenceAttachEventListener",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LineblocsServer).ConferenceAttachEventListener(ctx, req.(*ConferenceEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Lineblocs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Lineblocs",
	HandlerType: (*LineblocsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createBridge",
			Handler:    _Lineblocs_CreateBridge_Handler,
		},
		{
			MethodName: "createCall",
			Handler:    _Lineblocs_CreateCall_Handler,
		},
		{
			MethodName: "addChannel",
			Handler:    _Lineblocs_AddChannel_Handler,
		},
		{
			MethodName: "playRecording",
			Handler:    _Lineblocs_PlayRecording_Handler,
		},
		{
			MethodName: "getChannel",
			Handler:    _Lineblocs_GetChannel_Handler,
		},
		{
			MethodName: "createConference",
			Handler:    _Lineblocs_CreateConference_Handler,
		},
		{
			MethodName: "channel_getBridge",
			Handler:    _Lineblocs_ChannelGetBridge_Handler,
		},
		{
			MethodName: "channel_removeFromBridge",
			Handler:    _Lineblocs_ChannelRemoveFromBridge_Handler,
		},
		{
			MethodName: "channel_playTTS",
			Handler:    _Lineblocs_ChannelPlayTTS_Handler,
		},
		{
			MethodName: "channel_startAcceptingInput",
			Handler:    _Lineblocs_ChannelStartAcceptingInput_Handler,
		},
		{
			MethodName: "channel_removeDTMFListeners",
			Handler:    _Lineblocs_ChannelRemoveDTMFListeners_Handler,
		},
		{
			MethodName: "channel_automateCallHangup",
			Handler:    _Lineblocs_ChannelAutomateCallHangup_Handler,
		},
		{
			MethodName: "channel_gotoFlowWidget",
			Handler:    _Lineblocs_ChannelGotoFlowWidget_Handler,
		},
		{
			MethodName: "channel_startFlow",
			Handler:    _Lineblocs_ChannelStartFlow_Handler,
		},
		{
			MethodName: "channel_startRinging",
			Handler:    _Lineblocs_ChannelStartRinging_Handler,
		},
		{
			MethodName: "channel_stopRinging",
			Handler:    _Lineblocs_ChannelStopRinging_Handler,
		},
		{
			MethodName: "channel_hangup",
			Handler:    _Lineblocs_ChannelHangup_Handler,
		},
		{
			MethodName: "bridge_addChannel",
			Handler:    _Lineblocs_BridgeAddChannel_Handler,
		},
		{
			MethodName: "bridge_addChannels",
			Handler:    _Lineblocs_BridgeAddChannels_Handler,
		},
		{
			MethodName: "bridge_playTTS",
			Handler:    _Lineblocs_BridgePlayTTS_Handler,
		},
		{
			MethodName: "bridge_automateLegAHangup",
			Handler:    _Lineblocs_BridgeAutomateLegAHangup_Handler,
		},
		{
			MethodName: "bridge_automateLegBHangup",
			Handler:    _Lineblocs_BridgeAutomateLegBHangup_Handler,
		},
		{
			MethodName: "bridge_destroy",
			Handler:    _Lineblocs_BridgeDestroy_Handler,
		},
		{
			MethodName: "bridge_attachEventListener",
			Handler:    _Lineblocs_BridgeAttachEventListener_Handler,
		},
		{
			MethodName: "conference_addWaitingParticipant",
			Handler:    _Lineblocs_ConferenceAddWaitingParticipant_Handler,
		},
		{
			MethodName: "conference_addParticipant",
			Handler:    _Lineblocs_ConferenceAddParticipant_Handler,
		},
		{
			MethodName: "conference_setModeratorInConf",
			Handler:    _Lineblocs_ConferenceSetModeratorInConf_Handler,
		},
		{
			MethodName: "conference_attachEventListener",
			Handler:    _Lineblocs_ConferenceAttachEventListener_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lineblocs.proto",
}
